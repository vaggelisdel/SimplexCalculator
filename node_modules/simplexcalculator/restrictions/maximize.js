function maximize(objective, restrictions) {
    var restObj;
    var totalArray = [];

    var newobjective = objective;

    var newrestrictions = [];
    for (var i = 0; i < restrictions.length; i++) {

        var restData = [];

        if (restrictions[i].split(">=").length - 1 > 0) {
            const places = restrictions[i].split('>=', 2);
            newrestrictions.push(places[0] + "-0S" + (i + 1) + "+MA" + (i + 1) + "=" + places[1]);
            newobjective += "+0S" + i + 1 + "+MA" + (i + 1);
        } else if (restrictions[i].split("<=").length - 1 > 0) {
            const places = restrictions[i].split('<=', 2);
            newrestrictions.push(places[0] + "+0S" + (i + 1) + "=" + places[1]);
            newobjective += "+0S" + (i + 1);
        }

        var splitattributes = newrestrictions[i].split("-").join("/").split("+");
        for (var x = 0; x < splitattributes.length; x++) {
            if (splitattributes[x].split("/").length - 1 !== 0) {
                if (splitattributes[x].charAt(0) == "/"){
                    var started= 1;
                }else{
                    var started= 0;
                }
                var splittedString = splitattributes[x].split("/");
                for (var j = started; j < splittedString.length; j++) {
                    var oneSplittedItem = splittedString[j].split(", ");

                    if (j == 0){
                        restObj = {
                            "operator": "+",
                            "value": oneSplittedItem.toString()
                        };
                        restData.push(restObj);
                    }else{
                        restObj = {
                            "operator": "-",
                            "value": oneSplittedItem.toString()
                        };
                        restData.push(restObj);
                    }

                }
            } else {
                if (splitattributes[x].split("=").length - 1 !== 0) {
                    var finalAttr = splitattributes[x].split("=");
                    restObj = {
                        "operator": "+",
                        "value": finalAttr[0]
                    };
                    restData.push(restObj);
                    restObj = {
                        "operator": "=",
                        "value": finalAttr[1]
                    };
                    restData.push(restObj);
                } else {
                    restObj = {
                        "operator": "+",
                        "value": splitattributes[x]
                    };
                    restData.push(restObj);
                }
            }
        }
        var restrictionLabel = "restriction" + i;
        var restrObj = {
            [restrictionLabel]: restData
        };
        totalArray.push(restrObj);
    }
    var objectiveObj = {
        "objectiveFunction": newobjective
    };
    totalArray.push(objectiveObj);
    return totalArray;
}

module.exports = {maximize}